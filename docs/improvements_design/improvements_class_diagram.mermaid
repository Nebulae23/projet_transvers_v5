classDiagram
    class SkillGenerator {
        -templates: Map<String, SkillTemplate>
        -modifiers: List<SkillModifier>
        +generateSkill(classType: String, paragonLevel: int): Skill
        +validateSkill(skill: Skill): bool
        -combineComponents(base: SkillTemplate, mods: List<SkillModifier>): Skill
    }

    class SkillTemplate {
        +skillType: SkillType
        +baseEffects: List<Effect>
        +classRestrictions: List<String>
        +resourceCost: ResourceCost
        +createSkill(): Skill
    }

    class SkillModifier {
        +type: ModifierType
        +effects: List<Effect>
        +scaling: ScalingFunction
        +apply(skill: Skill): void
    }

    class ClassSkillManager {
        -principalSkills: Map<String, List<Skill>>
        -procedualSkills: List<Skill>
        +unlockBranch(skillId: String, branchId: String): void
        +addProceduralSkill(skill: Skill): void
    }

    class MenuCamera {
        -position: Vector3
        -target: Vector3
        -transitionState: CameraState
        +update(deltaTime: float): void
        +transitionTo(point: POIPoint): void
    }

    class WorldRenderer {
        -waterSystem: WaterSystem
        -skySystem: SkySystem
        -effectSystem: EffectSystem
        +render(camera: Camera): void
        +updateEffects(deltaTime: float): void
    }

    class WaterSystem {
        -reflectionTexture: Texture
        -refractionTexture: Texture
        +updateReflections(camera: Camera): void
        +renderWater(camera: Camera): void
    }

    class SkySystem {
        -cloudTexture: VolumetricTexture
        -timeOfDay: float
        -weatherState: WeatherState
        +updateClouds(deltaTime: float): void
        +renderSky(camera: Camera): void
    }

    class TerrainGenerator {
        -heightMap: HeightMap
        -biomeMap: BiomeMap
        -detailMap: DetailMap
        +generateTerrain(seed: int): void
        +updateDetails(position: Vector3): void
    }

    class EffectSystem {
        -particlePool: ParticlePool
        -activeEffects: List<Effect>
        +spawnEffect(type: EffectType, position: Vector3): void
        +updateEffects(deltaTime: float): void
    }

    SkillGenerator --> SkillTemplate
    SkillGenerator --> SkillModifier
    ClassSkillManager --> SkillGenerator
    WorldRenderer --> WaterSystem
    WorldRenderer --> SkySystem
    WorldRenderer --> EffectSystem
    MenuCamera --> WorldRenderer
    TerrainGenerator --> WorldRenderer