classDiagram
    class Game {
        -window: Window
        -renderer: Renderer
        -scene_manager: SceneManager
        -physics_engine: PhysicsEngine
        -resource_manager: ResourceManager
        +__init__()
        +run()
        +update(dt: float)
        +render()
    }

    class Window {
        -width: int
        -height: int
        -title: str
        -context: OpenGLContext
        +__init__(width: int, height: int, title: str)
        +create()
        +swap_buffers()
        +poll_events()
    }

    class Renderer {
        -shader_manager: ShaderManager
        -sprite_batch: SpriteBatch
        -particle_system: ParticleSystem
        +__init__()
        +begin_frame()
        +end_frame()
        +draw_sprite(sprite: Sprite)
        +draw_particles(particles: List[Particle])
    }

    class PhysicsEngine {
        -world: World
        -verlet_solver: VerletSolver
        -collision_system: CollisionSystem
        +__init__()
        +update(dt: float)
        +add_body(body: PhysicsBody)
        +remove_body(body: PhysicsBody)
        +calculate_trajectory(start: Vector2, velocity: Vector2): List[Vector2]
    }

    class Entity {
        -id: UUID
        -components: Dict[str, Component]
        +__init__()
        +add_component(component: Component)
        +get_component(type: str): Component
        +update(dt: float)
    }

    class Character {
        -stats: CharacterStats
        -inventory: Inventory
        -abilities: List[Ability]
        +__init__(class_type: str)
        +level_up()
        +add_ability(ability: Ability)
        +use_ability(ability_index: int, target: Vector2)
    }

    class Ability {
        -name: str
        -damage: float
        -cooldown: float
        -trajectory_type: TrajectoryType
        +__init__(config: Dict)
        +cast(source: Vector2, target: Vector2)
        +update(dt: float)
    }

    class World {
        -entities: List[Entity]
        -time_system: TimeSystem
        -city: City
        +__init__()
        +update(dt: float)
        +spawn_enemy(type: str, position: Vector2)
        +handle_day_night_transition()
    }

    Game *-- Window
    Game *-- Renderer
    Game *-- PhysicsEngine
    Game *-- World
    Entity <|-- Character
    Character *-- Ability
    World *-- Entity